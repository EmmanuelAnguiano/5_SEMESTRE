//se debe poner uint8_t o uint16_t

void GET_PAYLOAD(){ //este muestra el mensaje oculto y se debe convertir a string
	char payload[80]={0x45, 0x73, 0x74, 0x65, 0x20, 0x65, 0x73, 0x20, 0x65, 0x6C, 0x20, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6F, 0x20, 0x33, 0x20, 0x64,
0x65, 0x20, 0x35, 0x43, 0x20, 0x79, 0x20, 0x73, 0x61, 0x62, 0x65, 0x6D, 0x6F, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x61, 0x72, 0x20, 0x65, 0x6E, 0x20,
0x43};
	
	for(int i=0; i<=80; i++){
	cout <<payload[i];

	}	
}

void GET_MAC(){ //retorna direccion mac
	char maac[3]={0x7E, 0x00};
	
	for(int i=0; i<=3; i++){
	cout <<maac[i];
	}	
}

void GET_LENGTH(){ //retorna longitud de mensaje
	char len[2]={0x35};
	
	for(int i=0; i<=2; i++){
		cout <<len[i];
	}
}

void GET_OPTION(){ //retorna tipo de mensaje
	char opt[2]={0x81};
	
	for(int i=0; i<=2; i++){
		cout <<opt[i];
	}
}

void GET_RSSI(){ //retorna calidad de la señal
	char rssi[2]={0x33};
	
	for(int i=0; i<=2; i++){
		cout <<rssi[i];
	}
}

void CHECKSUM(){ //retorna curruptes del mensaje
	bool cks[2]={0xB6};
	
	for(int i=0; i<=2; i++){
		cout <<cks[i];
	}
}



